import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Transaction {
    private String type;
    private double amount;

    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
    }

    public String getType() {
        return type;
    }

    public double getAmount() {
        return amount;
    }
}

class Account {
    private String Id;
    private int Pin;
    private double bal;
    private List<Transaction> transHistory;

    public Account(String Id, int Pin, double initialBalance) {
        this.Id = Id;
        this.Pin = Pin;
        this.bal = initialBalance;
        this.transHistory = new ArrayList<>();
    }

    public boolean authenticate(int enteredPin) {
        return Pin == enteredPin;
    }

    public double getBalance() {
        return bal;
    }

    public void deposit(double amount) {
        bal += amount;
        transHistory.add(new Transaction("Deposit", amount));
    }

    public boolean withdraw(double amount) {
        if (bal >= amount) {
            bal -= amount;
            transHistory.add(new Transaction("Withdraw", amount));
            return true;
        } else {
            System.out.println("Insufficient balance.");
            return false;
        }
    }

    public void transfer(Account recipient, double amount) {
        if (withdraw(amount)) {
            recipient.deposit(amount);
            transHistory.add(new Transaction("Transfer", amount));
        } else {
            System.out.println("Transfer failed.");
        }
    }

    public void printtransHistory() {
        System.out.println("\nTransaction History:");
        for (Transaction transaction : transHistory) {
            System.out.println(transaction.getType() + " Amount: " + transaction.getAmount());
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Account userAccount = new Account("hyderabad", 2998, 11000);

        System.out.print("Enter User ID: ");
        String Id = scanner.nextLine();
        System.out.print("Enter User PIN: ");
        int Pin = scanner.nextInt();

        if (userAccount.authenticate(Pin)) {
            System.out.println("Authentication successful! Welcome, " + Id + ".");
            performATMOperations(userAccount, scanner);
        } else {
            System.out.println("Authentication failed.");
        }

        scanner.close();
    }

    public static void performATMOperations(Account account, Scanner scanner) {
        while (true) {
            System.out.println("\nATM Operations:");
            System.out.println("1. Check Balance");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transfer");
            System.out.println("5. Transactions History");
            System.out.println("6. Quit");
            System.out.print("Select an option: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.println("Your balance: " + account.getBalance());
                    break;
                case 2:
                    System.out.print("Enter deposit amount: ");
                    double depositAmount = scanner.nextDouble();
                    account.deposit(depositAmount);
                    System.out.println("Deposit successful.");
                    break;
                case 3:
                    System.out.print("Enter withdrawal amount: ");
                    double withdrawalAmount = scanner.nextDouble();
                    if (account.withdraw(withdrawalAmount)) {
                        System.out.println("Withdrawal successful.");
                    }
                    break;
                case 4:
                    System.out.print("Enter recipient's user ID: ");
                    String recipientId = scanner.next();
                    Account recipientAccount = getRecipientAccount(recipientId);
                    if (recipientAccount != null) {
                        System.out.print("Enter transfer amount: ");
                        double transferAmount = scanner.nextDouble();
                        account.transfer(recipientAccount, transferAmount);
                    } else {
                        System.out.println("Recipient not found.");
                    }
                    break;
                case 5:
                    account.printtransHistory();
                    break;
                case 6:
                    System.out.println("Thank you for using the ATM. ");
                    return;
                default:
                    System.out.println("Invalid option. Please select again.");
            }
        }
    }

    public static Account getRecipientAccount(String recipientId) {
        if ("mumbai".equals(recipientId)) {
            return new Account("mumbai", 1346, 2500);
        }
        return null;
    }
}
